/*
 * This file is generated by jOOQ.
 */
package com.kbalazsworks.stackjudge.db.tables;


import com.kbalazsworks.stackjudge.db.Keys;
import com.kbalazsworks.stackjudge.db.Public;
import com.kbalazsworks.stackjudge.db.tables.records.CompanyOwnerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyOwner extends TableImpl<CompanyOwnerRecord> {

    private static final long serialVersionUID = -2009837352;

    /**
     * The reference instance of <code>public.company_owner</code>
     */
    public static final CompanyOwner COMPANY_OWNER = new CompanyOwner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyOwnerRecord> getRecordType() {
        return CompanyOwnerRecord.class;
    }

    /**
     * The column <code>public.company_owner.company_id</code>.
     */
    public final TableField<CompanyOwnerRecord, Long> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.company_owner.user_ids_user_id</code>.
     */
    public final TableField<CompanyOwnerRecord, String> USER_IDS_USER_ID = createField(DSL.name("user_ids_user_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.company_owner.created_at</code>.
     */
    public final TableField<CompanyOwnerRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.company_owner</code> table reference
     */
    public CompanyOwner() {
        this(DSL.name("company_owner"), null);
    }

    /**
     * Create an aliased <code>public.company_owner</code> table reference
     */
    public CompanyOwner(String alias) {
        this(DSL.name(alias), COMPANY_OWNER);
    }

    /**
     * Create an aliased <code>public.company_owner</code> table reference
     */
    public CompanyOwner(Name alias) {
        this(alias, COMPANY_OWNER);
    }

    private CompanyOwner(Name alias, Table<CompanyOwnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyOwner(Name alias, Table<CompanyOwnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CompanyOwner(Table<O> child, ForeignKey<O, CompanyOwnerRecord> key) {
        super(child, key, COMPANY_OWNER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CompanyOwnerRecord> getPrimaryKey() {
        return Keys.USER_IDS_USER_ID___COMPANY_ID___PK;
    }

    @Override
    public List<UniqueKey<CompanyOwnerRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyOwnerRecord>>asList(Keys.USER_IDS_USER_ID___COMPANY_ID___PK);
    }

    @Override
    public List<ForeignKey<CompanyOwnerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompanyOwnerRecord, ?>>asList(Keys.COMPANY_OWNER__FK___COMPANY_OWNERS__COMPANY_ID___COMPANY__ID___ON_DELETE_CASCA, Keys.COMPANY_OWNER__FK___COMPANY_OWNERS__USER_IDS_USER_ID___USERS__IDS_USER_ID___ON);
    }

    public Company company() {
        return new Company(this, Keys.COMPANY_OWNER__FK___COMPANY_OWNERS__COMPANY_ID___COMPANY__ID___ON_DELETE_CASCA);
    }

    public Users users() {
        return new Users(this, Keys.COMPANY_OWNER__FK___COMPANY_OWNERS__USER_IDS_USER_ID___USERS__IDS_USER_ID___ON);
    }

    @Override
    public CompanyOwner as(String alias) {
        return new CompanyOwner(DSL.name(alias), this);
    }

    @Override
    public CompanyOwner as(Name alias) {
        return new CompanyOwner(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyOwner rename(String name) {
        return new CompanyOwner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyOwner rename(Name name) {
        return new CompanyOwner(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
